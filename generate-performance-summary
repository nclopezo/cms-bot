#! /usr/bin/env python
from optparse import OptionParser
from os import listdir
from os import path

def add_header(outfile,release_name):
	outfile.write('<!DOCTYPE html>\n')
	outfile.write('<html>\n')
        outfile.write('\t<head><title>Performance Results, last release evaluated %s </title>\n' %release_name)
        outfile.write('\t<!-- styles -->\n')
        outfile.write('\t<link href="bootstrap/css/bootstrap.css" rel="stylesheet">\n')
        outfile.write('\t<link href="bootstrap/css/bootstrap-responsive.css" rel="stylesheet">\n')
        outfile.write('\t<link href="bootstrap/css/docs.css" rel="stylesheet">\n')
        outfile.write('\t<link href="bootstrap/js/google-code-prettify/prettify.css" rel="stylesheet">\n')
        outfile.write('\t</head>\n')

def start_body(outfile):
	outfile.write('<body>\n')
	add_line_breaks(outfile,2)

def add_title_to_table(outfile,release_name):
        outfile.write('\t\t<thead>\n')
        outfile.write('\t\t<tr>\n')
        outfile.write('\t\t<td ><p class="text-center"><h2>Last Release Evaluated: %s </h2></p></td>\n' %release_name)
        outfile.write('\t\t<td ><p class="text-center"><img src="http://cms.web.cern.ch/sites/cms.web.cern.ch/files/cms-logo-with-text_0_0.png" class="img-rounded"></p></td>\n')
        outfile.write('\t\t</tr>\n')
        outfile.write('\t\t</thead>\n')

def add_line_breaks(outfile,quantity):
	for i in range(0,quantity):
		outfile.write('<br>\n')

def add_summary_table(outfile,release_name,base_dir):
	outfile.write('<div class="row">\n')
	outfile.write('\t<table class="table span6 offset3" >\n')
	add_title_to_table(outfile,release_name)
	outfile.write('\t<tbody>\n')
	for wf in sorted(listdir(base_dir)):
        	if path.isdir('%s/%s/'% (base_dir,wf) ) and not 'bootstrap' in wf:
			print 'Adding %s' % wf
			add_workflow(outfile,wf,base_dir)
			print
	outfile.write('\t</tbody>\n')
	outfile.write('\t</table>\n')
	outfile.write('</div>\n')

def add_workflow(outfile,workflow_name,base_dir):
	outfile.write('\t\t<tr>\n')
	outfile.write('\t\t\t<td colspan="2">\n')
	outfile.write('\t\t\t<br>\n')
	outfile.write('\t\t\t</td>\n')
	outfile.write('\t\t</tr>\n')
	outfile.write('\t\t<tr class="info">\n')
        outfile.write('\t\t<td colspan="2"> <div class="text-info"> <h4> %s </h4> </div> </td> \n' %workflow_name)
	for step in sorted(listdir('%s/%s' % (base_dir,workflow_name))):
		if path.isdir('%s/%s/%s'% (base_dir,workflow_name,step) ):
			print step
			outfile.write('\t\t\t<tr>\n')
			outfile.write('\t\t\t<td colspan="2"> %s </td>\n'% step)
			add_image(base_dir,workflow_name,step)
			outfile.write('\t\t\t</tr>\n')
               		print
	outfile.write('\t\t</tr>\n')

def add_image(base_dir,workflow_name,step):
	outfile.write('\t\t\t\t<tr>\n')
	for img in listdir('%s/%s/%s' % (base_dir,workflow_name,step)):
		if (img == 'average_cpu_histo.png' or img == 'maximum_rss_histo.png'):
			print img
			img_url='%s/%s/%s/%s' % (base_url,workflow_name,step,img)
			outfile.write('\t\t\t\t<td><a href="%s">' %img_url)
			outfile.write('<img src="%s" alt="%s" height="400" width="400" ></a></td>\n' % (img_url,img_url))
	outfile.write('\t\t\t\t</tr>\n')

def end_body(outfile):
	outfile.write('</body>\n')
	outfile.write('</html>\n')

#---- Parser Options
#-----------------------------------------------------------------------------------
parser = OptionParser(usage="usage: %prog RELEASE_NAME BASE_DIR \n RELEASE_NAME \t release for which the summary will be generated.\n BASE_DIR \t the files where the results are")

(options, args) = parser.parse_args()

#-----------------------------------------------------------------------------------
#---- Start
#-----------------------------------------------------------------------------------

if (len(args)<2):
        print 'you need to specify a release name and a base directory'
        parser.print_help()
        exit()

release = args[0]
base_dir = args[1]
base_url = 'https://cmssdt.cern.ch/SDT/jenkins-artifacts/performance/summary/'

print 'I will generate the results page for %s \n' % release

outfile = open('performanceSummaryOut.html', 'w')
add_header(outfile,release)
start_body(outfile)
add_summary_table(outfile,release,base_dir)
end_body(outfile)
outfile.close()
