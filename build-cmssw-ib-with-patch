#!/bin/sh -ex
ARCHITECTURE=$1
RELEASE_FORMAT=$2
REPOSITORY=$3
PACKAGE_NAME=cmssw
# Workspace is usually defined by jenkins. If not running in
# jenkins it will assume the current directory is the workspace.
WORKSPACE=${WORKSPACE-$PWD}
cd $WORKSPACE

BUILD_JOBS=2
BUILD_NPROC=$(getconf _NPROCESSORS_ONLN)

case $ARCHITECTURE in
  *_mic_*) export BUILD_ARCH=`echo $ARCHITECTURE | cut -f1,2 -d_` ;;
  *_armv7hl_*) BUILD_JOBS=1; BUILD_NPROC=3 ;;
esac

# If you find a squid process, use it, assuming it has the default port.
if pgrep squid >/dev/null ; then
  export http_proxy=http://localhost:3128
fi

RELEASE_NAME=`date +$RELEASE_FORMAT`
DAY=`date +%Y-%m-%d`
HOUR=`echo $RELEASE_NAME | sed -e's|.*-\([0-9][0-9]\)00|\1|'`
# RELEASE_QUEUE=`echo $RELEASE_NAME | sed -e 's/\(CMSSW_[0-9][0-9]*_[0-9][0-9]*\).*/\1_X/'`
RELEASE_QUEUE=`echo $RELEASE_NAME | sed -e 's/_X.*/_X/'`

# Hardcode special queues like SLHC one.
case $RELEASE_NAME in
  *SLHC*) RELEASE_QUEUE=${RELEASE_QUEUE}_SLHC ;;
esac

# Hardoce XROOTD special queue XROOTD
case $RELEASE_NAME in
  *XROOTD*) RELEASE_QUEUE=${RELEASE_QUEUE}ROOTD_X ;;
esac

CMSDIST_REPO=cms-sw
PKGTOOLS_REPO=cms-sw

mkdir -p $WORKSPACE/$BUILD_NUMBER
cd $WORKSPACE/$BUILD_NUMBER
rm -rf CMSDIST PKGTOOLS w


git clone git://github.com/$CMSDIST_REPO/cmsdist.git CMSDIST
pushd CMSDIST
  DEFAULT_CMSDIST_TAG="`git rev-parse HEAD`"
popd
CONFIG_MAP_URL="https://raw.githubusercontent.com/cms-sw/cms-bot/HEAD/config.map"
eval `curl -s -k $CONFIG_MAP_URL | grep "SCRAM_ARCH=$ARCHITECTURE;" | grep "RELEASE_QUEUE=$RELEASE_QUEUE;"`

# eval `curl https://raw.github.com/cms-sw/cms-bot/HEAD/config.map | grep $ARCHITECTURE`
# We use git clone -b because this forces git to think that $CMSDIST_TAG, PKGTOOLS_TAG,
# are both branches. See below to handle the case in which they are actually tags.
rm -rf CMSDIST
git clone -b $CMSDIST_TAG git://github.com/$CMSDIST_REPO/cmsdist.git CMSDIST
git clone -b $PKGTOOLS_TAG git://github.com/$PKGTOOLS_REPO/pkgtools.git PKGTOOLS
# In case github is down.
# git clone -b $CMSDIST_TAG https://:@git.cern.ch/kerberos/CMSDIST.git CMSDIST
# git clone -b $PKGTOOLS_TAG https://:@git.cern.ch/kerberos/PKGTOOLS.git PKGTOOLS

# If we use a tag, rather than a branch, we need to check-it out explicitly.
# We also store the HASH of both PKGTOOLS and CMSDIST to reuse them later on.
# ALL_PREVIOUS_RELEASES contains both IBs and fill releases and we use it
# to eventually skip the build if the same exact IB is already available.
pushd CMSDIST
  git checkout $CMSDIST_TAG
  PREVIOUS_RELEASES=`git show --pretty='%d' HEAD | tr '[ ,()]' '[\n   ]' | grep -v $RELEASE_NAME | { grep "^\(IB\|REL\)/${RELEASE_QUEUE}_[0-9][^/]*/$ARCHITECTURE" || true; }`
  CMSDIST_HASH="`git rev-parse HEAD`"
  ALL_PREVIOUS_RELEASES=`git show --pretty='%d' HEAD | tr '[ ,()]' '[\n   ]' | grep -v $RELEASE_NAME | { grep "^ALL/${RELEASE_QUEUE}_[0-9][^/]*/$ARCHITECTURE" || true; }`
popd

pushd PKGTOOLS; git checkout $PKGTOOLS_TAG; PKGTOOLS_HASH="`git rev-parse HEAD`"; popd

# We checkout a few files from the default branch in any case.
pushd CMSDIST
  git checkout $DEFAULT_CMSDIST_TAG -- cmssw-validation.spec
  git checkout $DEFAULT_CMSDIST_TAG -- cmssw-ib.spec
  git checkout $DEFAULT_CMSDIST_TAG -- das-cache.file
popd

PKGTOOLS/cmsBuild --debug -k --builders $BUILD_JOBS -j $BUILD_NPROC --repository $REPOSITORY --architecture $ARCHITECTURE --work-dir w `buildtype="build SCRAMV1"; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype`

# Decide if we already have a release which uses the same CMSDIST.
pushd w
for previous in $PREVIOUS_RELEASES; do
  previous=`echo $previous | cut -f2 -d/`
  echo "Checking if we can install $previous"
  set +e
  CMSSW_RELEASE_BASE=`source $ARCHITECTURE/apt-init.sh; apt-cache search cms\\\+cmssw\\\+$previous | grep 'cms[+]cmssw[+]' | cut -f1 -d\  | cut -f3 -d+ | grep -e "^$previous\$"`
  set -e
  if [ ! "X$CMSSW_RELEASE_BASE" = X ]; then
    PACKAGE_NAME=cmssw-patch
    perl -p -i -e "s/BuildRequires: cmssw/BuildRequires: cmssw-patch/" ../CMSDIST/cmssw-ib.spec
    perl -p -i -e "s/BuildRequires: cmssw/BuildRequires: cmssw-patch/" ../CMSDIST/cmssw-validation.spec
    perl -p -i -e "s/%define baserelver[\s].*/%define baserelver $CMSSW_RELEASE_BASE/" ../CMSDIST/cmssw-patch-build.file
    perl -p -i -e "s/%define baserelqueue[\s].*/%define baserelqueue $CMSSW_RELEASE_BASE/" ../CMSDIST/cmssw-patch-build.file
    perl -p -i -e 's/CMSSW_ROOT/CMSSW_PATCH_ROOT/' ../CMSDIST/cmssw-ib.spec
    perl -p -i -e 's/CMSSW_VERSION/CMSSW_PATCH_VERSION/' ../CMSDIST/cmssw-ib.spec
    break
  fi
done

# This is done to decide wether or not we actually need to build a release or  
# the same CMSDIST / PKGTOOLS / CMSSW tags were used to build an IB which 
# is already available in the apt repository.
if [ "X$PACKAGE_NAME" = Xcmssw-patch ]; then
  AVAILABLE_RELEASES=`source $ARCHITECTURE/apt-init.sh; apt-cache search cms\\\+cmssw | grep ${RELEASE_QUEUE} | grep 'cms[+]cmssw\(-patch\|\)[+]' | cut -f1 -d\  | cut -f3 -d+`
  for same_tag in $RELEASE_LIST; do
    if echo $ALL_PREVIOUS_RELEASES | grep $same_tag; then
      if echo $AVAILABLE_RELEASES | grep $same_tag; then
        echo $same_tag uses the same CMSDIST, PKGTOOLS and CMSSW tag. Not building.
        exit 0
      fi
    fi
  done
fi
popd

case $ARCHITECTURE in
 *mic*) CMSSW_RELEASE_BASE=""; PACKAGE_NAME=cmssw; CMSSW_TOOL_CONF=cmssw-mic-tool-conf ;;
 *) CMSSW_TOOL_CONF=$PACKAGE_NAME-tool-conf ;;
esac

if [ X$CMSSW_RELEASE_BASE = X ]; then CMSSW_RELEASE_BASE=$RELEASE_NAME; fi
echo "### RPM cms dummy `date +%%s`\n%prep\n%build\n%install\n" > CMSDIST/dummy.spec
perl -p -i -e "s/### RPM cms cmssw .*/### RPM cms cmssw $CMSSW_RELEASE_BASE/" CMSDIST/cmssw.spec
perl -p -i -e "s/### RPM cms cmssw-ib .*/### RPM cms cmssw-ib $RELEASE_NAME/" CMSDIST/cmssw-ib.spec
perl -p -i -e "s/### RPM cms cmssw-validation .*/### RPM cms cmssw-validation $RELEASE_NAME/" CMSDIST/cmssw-validation.spec
perl -p -i -e "s/### RPM cms cmssw-patch.*/### RPM cms cmssw-patch $RELEASE_NAME/" CMSDIST/cmssw-patch.spec

while [ true ]; do
  PKGTOOLS/cmsBuild --debug -k --builders $BUILD_JOBS -j $BUILD_NPROC --repository $REPOSITORY --architecture $ARCHITECTURE --work-dir w `buildtype="build coral"; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype`
  PKGTOOLS/cmsBuild --debug -k --builders $BUILD_JOBS -j $BUILD_NPROC --repository $REPOSITORY --architecture $ARCHITECTURE --work-dir w `buildtype="build $CMSSW_TOOL_CONF"; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype`
  if [ "X$(ls w/RPMS/$ARCHITECTURE | wc -l | sed -e 's/[^0-9]*//')" = X0 ]; then
    break;
  fi
  PKGTOOLS/cmsBuild --debug --repository $REPOSITORY --sync-back --architecture $ARCHITECTURE --work-dir w `buildtype="upload $CMSSW_TOOL_CONF" ; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype` || true
  rm -rf w
done

PKGTOOLS/cmsBuild --debug -k --builders $BUILD_JOBS -j `echo "$BUILD_NPROC * 2" | bc` --repository $REPOSITORY --architecture $ARCHITECTURE --work-dir w `buildtype="build cmssw-ib" ; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype`
PKGTOOLS/cmsBuild --debug --repository $REPOSITORY --sync-back --architecture $ARCHITECTURE --work-dir w `buildtype="upload cmssw-ib" ; echo $PKGTOOLS_TAG | grep 'V00-16' > /dev/null && ( echo -e "[$buildtype]\npriority: 20 \n[bootstrap]\npriority: 10\ndoNotBootstrap: True" > cmsBuild.cfg && echo --cfg cmsBuild.cfg ) || echo $buildtype`

if [ ! -e w/$ARCHITECTURE/cms/cmssw/$RELEASE_NAME/build-errors ]; then
  pushd CMSDIST
    git remote add originrw git@github.com:$CMSDIST_REPO/cmsdist.git
    git tag ALL/$RELEASE_NAME/$ARCHITECTURE $CMSDIST_HASH
    git push originrw ALL/$RELEASE_NAME/$ARCHITECTURE || true
    if [ X$CMSSW_RELEASE_BASE = X$RELEASE_NAME ]; then
        git tag IB/$RELEASE_NAME/$ARCHITECTURE $CMSDIST_HASH
        git push originrw IB/$RELEASE_NAME/$ARCHITECTURE || true
    fi
  popd CMSDIST
fi

echo CMSDIST_HASH=$CMSDIST_HASH > $WORKSPACE/buildprops
echo PKGTOOLS_HASH=$PKGTOOLS_HASH >> $WORKSPACE/buildprops
echo PACKAGE_NAME=$PACKAGE_NAME >> $WORKSPACE/buildprops
echo CMSSW_RELEASE_BASE=$CMSSW_RELEASE_BASE >> $WORKSPACE/buildprops
echo TRIGGERING_RELEASE=${RELEASE_QUEUE}_${DATE_FORMAT} >> $WORKSPACE/buildprops
echo TRIGGERING_ARCHITECTURE=${ARCHITECTURE} >> $WORKSPACE/buildprops
echo RELEASE_QUEUE=${RELEASE_QUEUE} >> $WORKSPACE/buildprops

# This is used to guide the creation of additional files which drive the
# spawning of extra tests.
CONFIG_MAP_URL="https://raw.githubusercontent.com/cms-sw/cms-bot/HEAD/config.map"
for x in `curl -k -s $CONFIG_MAP_URL | grep "SCRAM_ARCH=$ARCHITECTURE;" | grep "RELEASE_QUEUE=$RELEASE_QUEUE;" | sed -e's/.*ADDITIONAL_TESTS=//;s/;.*//' | tr , '\n'`; do
  echo "RELEASE_FORMAT=${RELEASE_QUEUE}_${DATE_FORMAT}" > $x-properties
  echo "ARCHITECTURE=${ARCHITECTURE}" >> $x-properties
  echo "RELEASE_QUEUE=${RELEASE_QUEUE}" >> $x-properties
done
