#! /usr/bin/env python

from optparse import OptionParser
import subprocess
from os.path import expanduser
from github import Github
import re
import datetime
import json
import pickle

#-----------------------------------------------------------------------------------
#---- Parser Options
#-----------------------------------------------------------------------------------
parser = OptionParser(usage="usage: %prog COMPARISON_PAIRS" 
                            "\n COMPARISON_PAIRS: a list separated by commas with the pairs of tags or "
			    "\n heads or branches that you want to compare, this pairs should be separated by .."
                            "\n For example:"
			    "\n CMSSW_7_1_0_pre2..CMSSW_7_0_X,CMSSW_6_2_7..CMSSW_6_2_X")

(options, args) = parser.parse_args()

#-----------------------------------------------------------------------------------
#---- Review of arguments
#-----------------------------------------------------------------------------------

if (len(args)==0):
        print 'not enough arguments\n'
        parser.print_help()
        exit()

requested_comparisons_param = args[0]

requested_comparisons = requested_comparisons_param.split(",")

#-----------------------------------------------------------------------------------
#---- Fuctions
#-----------------------------------------------------------------------------------


def get_pr_number(line_parts):
	number_and_name = line_parts[0].replace('"','')
        number = re.sub(' from .*', '', number_and_name)
        number = re.sub('Merge pull request #', '', number)
	return number

def get_pr_author_login(line_parts):
	number_and_name = line_parts[0].replace('"','')
        name = re.sub('^Merge .* from ', '', number_and_name)
	name = name.split('/')[0]
        return name

def get_pr_title(line_parts):
	title = line_parts[1].replace('"','').strip()
	return title

def get_info_pr(line):
	pull_request = {}
	line_parts = line.split(',')
	pull_request['number'] = get_pr_number(line_parts)
	pull_request['author_login'] = get_pr_author_login(line_parts)
	pull_request['title'] = get_pr_title(line_parts)
	pull_request['url'] = 'https://github.com/cms-sw/cmssw/pull/%d' % int(pull_request['number'])
	return pull_request

def get_tags_from_line(line, release_queue):
	tags_str = line.split('tags->')[1]
	filter = release_queue[:-1]
	## if the tags part is equal to ," there are no tags
	if tags_str != ',"':
		tags = tags_str.split(',',1)[1].strip().replace('(','').replace(')','').split(',')
		#I also have to remove the branch name
		tags = [t for t in tags if filter in t and t.strip().replace('"','') != release_queue]
		return tags
	else:
		return []


def analyze_merged_prs_ouput(output,start_tag,release_queue,release_queue_results):
	comparisons = []
	merged_prs = []
	for line in reversed(output.splitlines()):
		#first I get the info about the pull request, and add it to the list
		pr = get_info_pr(line)
                merged_prs.append(pr)
		#if the line has tags I need to switch to a new list of merged_prs
		new_tags = get_tags_from_line(line,release_queue)
		num_tags = len(new_tags)
		if num_tags > 0:
			temp_comparisons = []
			#for each tag except the last one there were no changes
			for i in range(num_tags):
				if i < num_tags-1:
					comparison_info = {}
					comparison_info['compared_tags'] = new_tags[i].strip()
					comparison_info['merged_prs'] = []
					temp_comparisons.append(comparison_info)
				# I am in the last tag and this one was responsible of the prs that I have been accumilatng in merged_prs
				else:	
					comparison_info = {}
                                        comparison_info['compared_tags'] = new_tags[i].strip().replace('"','')
                                        comparison_info['merged_prs'] = merged_prs
					temp_comparisons.append(comparison_info)
					#now I have to reset merged_prs to be ready for a new list
					merged_prs=[]
			temp_comparisons = [c for c in reversed(temp_comparisons)]
			release_queue_results['comparisons'] += temp_comparisons

#-----------------------------------------------------------------------------------
#---- Fuctions -- Analize Git ouputs
#-----------------------------------------------------------------------------------


def analyze_merged_prs_ouput_backwards(output,start_tag,release_queue,release_queue_results):
	comparisons = []
        merged_prs = []
	times_reseted = 0
	read_first = False
	current_tag = '' 
        for line in output.splitlines():
		#print "backwards ------------>"
		#print line
		#first I get the info about the pull request, and add it to the list
		pr = get_info_pr(line)
                merged_prs.append(pr)
		new_tags = get_tags_from_line(line,release_queue)
                num_tags = len(new_tags)
                if num_tags > 0:
			temp_comparisons = []
                        #for each tag except the last one there were no changes
                        for i in range(num_tags):
                                if i < num_tags-1:
                                        comparison_info = {}
                                        comparison_info['compared_tags'] = new_tags[i].strip().replace('"','')
                                        comparison_info['merged_prs'] = []
					if not read_first:
                                        	temp_comparisons.insert(0,comparison_info)
                                # I am in the last tag and this one was responsible of the prs that I will accumulate from now on
                                else:
					if current_tag == '':
						current_tag =  new_tags[i].strip().replace('"','')
						read_first = True
					else:
						comparison_info = {}
						comparison_info['compared_tags'] = current_tag
						last_pr = merged_prs.pop()
						comparison_info['merged_prs'] = merged_prs
                                        	temp_comparisons.insert(0,comparison_info)
                                        	current_tag =  new_tags[i].strip()
                                        	#now I have to reset merged_prs to be ready for a new list
                                        	merged_prs=[]
						merged_prs.append(last_pr)
						times_reseted +=1
			release_queue_results['comparisons'] = temp_comparisons + release_queue_results['comparisons']
		#I only want what was included in the start tag, not the whole history
		if times_reseted == 1:
			break

def get_results_one_relval_file(file):
	f = open(file, "r")
	result=pickle.load(f)
	failed = [x for v in result.values() for x in v["failed"] if x > 0]
	# if it is empty all tests passed
	if failed == []:
		return True
	else:
		return False

def analyze_relvals_results(output,relvals_results,arch):
	for line in output.splitlines():
		m = re.search('CMSSW.*[0-9]/', line)
		rel_name = line[m.start():m.end()-1]
		result_arch = {}
		result_arch['arch'] = arch
		result_arch['file'] = line
		passed = get_results_one_relval_file(line)
		result_arch['passed'] = passed

		if rel_name not in relvals_results.keys():
			relvals_results[rel_name] = []

		relvals_results[rel_name].append(result_arch)
		

#-----------------------------------------------------------------------------------
#---- Fuctions -- Execute Magic commands
#-----------------------------------------------------------------------------------


def execute_magic_command_prs(start_tag,end_tag,release_queue,release_queue_results, forward):
	# I had to replace the string this way because the command itselt has %s, %b, and %d
	if forward:
		command_to_execute = magic_command_prs.replace('START_TAG',start_tag).replace('END_TAG',end_tag)
	else:
		command_to_execute = magic_command_backwards_prs.replace('START_TAG',start_tag)

	print 'Executing:'
	print command_to_execute
	
	p = subprocess.Popen(command_to_execute, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out,err = p.communicate()
	ret_code = p.returncode
	
	if ret_code != 0:
                print ret_code
                print err
		exit(1)
	else:
		if forward:
			analyze_merged_prs_ouput(out,start_tag,release_queue,release_queue_results)
		else:
			analyze_merged_prs_ouput_backwards(out,start_tag,release_queue,release_queue_results)

def execute_magic_command_find_results_relvals(relvals_results):
	for arch in architectures:
		command_to_execute = magic_command_find_resutls_relvals.replace('ARCHITECTURE',arch)
		print 'Executing:'
        	print command_to_execute
		p = subprocess.Popen(command_to_execute, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        	out,err = p.communicate()
        	ret_code = p.returncode

        	if ret_code != 0:
                	print ret_code
                	print err
			exit(1)
		else:
                        analyze_relvals_results(out,relvals_results,arch)



def print_results(results):
	print "Results:"
	print
	print
	for rq in results:
		print
		print rq['release_name']
		print '/////////////////////////'
		for comp in rq['comparisons']:
			print comp['compared_tags']

			relvals_results = [res['arch']+':'+str(res['passed']) for res in comp['relvals'] ]
			print '\t' + str(relvals_results)

			merged_prs = [pr['number'] for pr in comp['merged_prs']]
			print '\t' + str(merged_prs)

def add_relvals_to_results(results, relvals_results):
	for rq in results:
                for comp in rq['comparisons']:
			rel_name = comp['compared_tags']
			results = relvals_results.get(rel_name)
			comp['relvals'] = results if results else []


#-----------------------------------------------------------------------------------
#---- Start of execution
#-----------------------------------------------------------------------------------

magic_command_backwards_prs = 'GIT_DIR=/afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' START_TAG | grep "Merge pull" | head -n 50'

magic_command_prs = 'GIT_DIR=/afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' START_TAG..END_TAG | grep "Merge pull"'

magic_command_find_resutls_relvals = 'find /afs/cern.ch/cms/sw/ReleaseCandidates/ARCHITECTURE/www -name runTheMatrixMsgs.pkl'

architectures = ['slc5_amd64_gcc472','slc5_amd64_gcc481','slc6_amd64_gcc481']

print magic_command_prs

results = []

for comp in requested_comparisons:
	start_tag = comp.split("..")[0]
	end_tag = comp.split("..")[1]
	
	release_queue = start_tag
	
	# if is a SLHC release, the split will happen with the fifth underscore _
	if 'SLHC' in release_queue:
		release_queue = re.match(r'^((?:[^_]*_){%d}[^_]*)_(.*)' % (4), release_queue).groups()[0]
	else:
		release_queue = re.match(r'^((?:[^_]*_){%d}[^_]*)_(.*)' % (3), release_queue).groups()[0]

	print "I will analyze %s from %s to %s:" % (release_queue,start_tag,end_tag)

	release_queue_results = {}
	
	release_queue_results['release_name'] = release_queue
	release_queue_results['comparisons'] = []

	execute_magic_command_prs(start_tag,end_tag,release_queue,release_queue_results, forward=False)
	execute_magic_command_prs(start_tag,end_tag,release_queue,release_queue_results, forward=True)

	results.append(release_queue_results)
	
	print 
	print "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

relvals_results = {}

execute_magic_command_find_results_relvals(relvals_results)

add_relvals_to_results(results, relvals_results)

print_results(results)

out_json = open("merged_prs_summary.json", "w")
json.dump(results,out_json,indent=4)
out_json.close()
