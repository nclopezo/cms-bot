#!/usr/bin/env python

# Given a branch, gets all of its pull requests
# and recreates them in a different branch.

from github import Github, GithubException
from sys import exit
from os.path import expanduser
from argparse import ArgumentParser
from optparse import OptionParser

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("source")
  parser.add_argument("dest")
  parser.add_argument( "-n", dest='dryRun', action="store_true" )
  args = parser.parse_args() 
  print args
  

  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())

  try:
    gh_repo = gh.get_organization("cms-sw").get_repo("cmssw")
  except:
    print "Could not find repository."
    exit(1)
  milestones = gh_repo.get_milestones(state="open")
  milestone = [x for x in milestones if args.source in x.title]
  destMilestone = [x for x in milestones if args.dest in x.title]

  if not milestone:
    print "Could not find source milestone."
    exit(1)

  if not destMilestone:
    print "Could not find destination milestone."
    exit(1)

  for issue in gh_repo.get_issues(milestone=milestone.pop(), state="open"):
    pr = gh_repo.get_pull(issue.number)
    print issue.number, pr.head.user.login, pr.head.ref, [ m.title for m in destMilestone ]
    newBody = issue.body + "\nAutomatically ported from " + args.source + " #%s" % issue.number

    if args.dryRun:
        print 'Not creating new PR on Github (dry-run)'
        continue
    try:
     print 'aa'    
     #gh_repo.create_pull(title = issue.title, body =newBody, base = args.dest, head = "%s:%s" % (pr.head.user.login, pr.head.ref))
    except GithubException:
      continue
